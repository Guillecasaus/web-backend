@authToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2RiMGZkOWFmZWI0NTBkMWYyN2NiZWIiLCJpYXQiOjE3NDI0MDk2ODksImV4cCI6MTc0MjQxNjg4OX0.ED1YcWqFTndH5DPd0IRc-0Xt2j3MUgxXSscrkF7qAwU


### Registro de usuario
POST http://localhost:3000/api/auth/register HTTP/1.1
Content-Type: application/json

{
  "name": "Guillermo",
  "age": 20,
  "email": "guillermo@example.com",
  "password": "pass1234"
}

### Login de usuario
POST http://localhost:3000/api/auth/login HTTP/1.1
Content-Type: application/json

{
  "email": "guillermo@example.com",
  "password": "pass1234"
}

### Validaci√≥n de email
PUT http://localhost:3000/api/auth/validate HTTP/1.1
Content-Type: application/json
Authorization: {{authToken}}

{
  "code": "965510"
}

### Obtener usuario a partir del token JWT
GET http://localhost:3000/api/users/me HTTP/1.1
Authorization: {{authToken}}
Content-Type: application/json

### Onboarding (actualizar datos personales)
PUT http://localhost:3000/api/users/onboarding
Authorization: {{authToken}}
Content-Type: application/json

{
  "name": "Cambio",
  "lastname": "Casaus",
  "nif": "12345678A"
}


### Actualizar logo (si ya lo tienes implementado)
PATCH http://localhost:3000/api/users/logo HTTP/1.1
Authorization: Bearer <TOKEN_OBTENIDO_DEL_REGISTRO_O_LOGIN>
Content-Type: multipart/form-data; boundary=boundary

--boundary
Content-Disposition: form-data; name="logo"; filename="logo.jpg"
Content-Type: image/jpeg

< ./logo.jpg
--boundary--
