@authToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2RiMGZkOWFmZWI0NTBkMWYyN2NiZWIiLCJpYXQiOjE3NDI0OTI2NDksImV4cCI6MTc0MjQ5OTg0OX0.VpR2D_Llz6CU5K0VPcBmjrkVivLM3DR94Bpv0dwWDvU

### Registro de usuario
POST http://localhost:3000/api/auth/register HTTP/1.1
Content-Type: application/json

{
  "name": "Guillermo",
  "age": 20,
  "email": "guillermo@example.com",
  "password": "pass1234"
}


### Registro de usuario autónomo
POST http://localhost:3000/api/auth/register HTTP/1.1
Content-Type: application/json

{
  "name": "Guillermo autonomo",
  "age": 20,
  "email": "guillermo@gmail.com",
  "password": "pass1234"
}


### Login de usuario
POST http://localhost:3000/api/auth/login HTTP/1.1
Content-Type: application/json

{
  "email": "guillermo@example.com",
  "password": "pass1234"
}

### Validación de email
PUT http://localhost:3000/api/auth/validate HTTP/1.1
Content-Type: application/json
Authorization: {{authToken}}

{
  "code": "965510"
}

### Obtener usuario a partir del token JWT
GET http://localhost:3000/api/users/me
Authorization: {{authToken}}


### Onboarding (actualizar datos personales)
PUT http://localhost:3000/api/users/onboarding
Authorization: {{authToken}}
Content-Type: application/json

{
  "name": "Cambio",
  "lastname": "Casaus",
  "nif": "12345678A",
}

### Actualizar datos de la empresa
PATCH http://localhost:3000/api/users/company
Authorization: {{authToken}}
Content-Type: application/json

{
  "companyName": "MiEmpresa",
  "cif": "B12345678",
  "address": "Calle Falsa 123"
}

### Subir logo a IPFS y guardar en BD
POST http://localhost:3000/api/storage HTTP/1.1
Content-Type: multipart/form-data; boundary=boundry

--boundry
Content-Disposition: form-data; name="logo"; filename="logo.jpg"
Content-Type: image/jpeg

< ./logo.jpg
--boundry--

